// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clinic {
  id                  String    @id @default(cuid())
  name                String    @unique // Clinic names should be unique
  address             String? // Optional address
  phone               String? // Optional phone
  isActive            Boolean   @default(false) // Subscription status
  subscriptionEndDate DateTime? // Subscription end date
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Relation: A clinic can have many users
  users  User[]
  // Relation: A clinic can have many owners
  owners Owner[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String // Store hashed password
  firstName String?
  lastName  String?
  role      UserRole @default(STAFF) // Enum for roles
  isActive  Boolean  @default(true) // User account status (different from clinic subscription)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation: Each user belongs to exactly one clinic
  clinicId String
  clinic   Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade) // If clinic deleted, delete user

  @@index([clinicId]) // Index for faster lookups by clinic
}

enum UserRole {
  ADMIN // Platform Admin (can manage clinics) - Might need separate handling or flag later
  STAFF // Regular Vet/Staff user
}

model Owner {
  id                      String   @id @default(cuid())
  firstName               String
  lastName                String
  phone                   String
  email                   String?
  allowAutomatedReminders Boolean  @default(true)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  // Relation: Each owner belongs to exactly one clinic
  clinicId String
  clinic   Clinic @relation(fields: [clinicId], references: [id], onDelete: Cascade) // If clinic deleted, delete owner

  // Relation: An owner can have many pets
  pets Pet[]

  @@index([clinicId]) // Index for faster lookups by clinic
}

model Pet {
  id        String    @id @default(cuid())
  name      String
  species   String?
  breed     String?
  dob       DateTime?
  gender    String?
  color     String?
  notes     String?   @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relation: Each pet belongs to exactly one owner
  ownerId String
  owner   Owner  @relation(fields: [ownerId], references: [id], onDelete: Cascade) // If owner deleted, delete pet

  // Relation: A pet can have many visits
  visits Visit[]

  @@index([ownerId]) // Index for faster lookups by owner
}

model Visit {
  id                String    @id @default(cuid())
  visitDate         DateTime  @default(now())
  visitType         String
  notes             String?   @db.Text
  nextReminderDate  DateTime?
  reminderSent      Boolean   @default(false)
  isReminderEnabled Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relation: Each visit belongs to exactly one pet
  petId String
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade) // If pet deleted, delete visit

  @@index([petId]) // Index for faster lookups by pet
  @@index([nextReminderDate]) // Index for efficient querying of reminders
}
